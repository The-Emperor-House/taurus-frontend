import { getToken } from "next-auth/jwt";
import { NextResponse } from "next/server";

// üö© ‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á login
const protectedRoutes = ["/dashboard", "/profile"];
// üö© ‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏°‡∏∑‡πà‡∏≠ login ‡πÅ‡∏•‡πâ‡∏ß
const authRoutes = ["/auth/login", "/auth"];

export async function middleware(req) {
  const token = await getToken({
    req,
    secret: process.env.NEXTAUTH_SECRET,
  });

  const { pathname } = req.nextUrl;

  // üîí ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà login ‡πÅ‡∏•‡πâ‡∏ß‡∏à‡∏∞‡πÄ‡∏Ç‡πâ‡∏≤ route ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á login
  const isProtected = protectedRoutes.some((route) =>
    pathname.startsWith(route)
  );

  // üîì ‡∏ñ‡πâ‡∏≤ login ‡∏≠‡∏¢‡∏π‡πà ‡πÅ‡∏•‡πâ‡∏ß‡∏à‡∏∞‡πÄ‡∏Ç‡πâ‡∏≤ route ‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡πÅ‡∏Ñ‡πà‡∏ï‡∏≠‡∏ô‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà login
  const isAuthRoute = authRoutes.some((route) =>
    pathname.startsWith(route)
  );

  // ‚úÖ ‡∏Å‡∏£‡∏ì‡∏µ: ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ login ‡πÅ‡∏ï‡πà‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤ protected route
  if (!token && isProtected) {
    return NextResponse.redirect(new URL("/auth/login", req.url));
  }

  // ‚úÖ ‡∏Å‡∏£‡∏ì‡∏µ: login ‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏ï‡πà‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤ auth route
  if (token && isAuthRoute) {
    return NextResponse.redirect(new URL("/", req.url));
  }

  return NextResponse.next();
}

export const config = {
  matcher: [
    "/dashboard/:path*",
    "/profile/:path*",
    "/auth/:path*",
  ],
};
